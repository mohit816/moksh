package com.sample.ecofriendly.service;

import java.sql.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Service;

import com.sample.ecofriendly.model.Order;
import com.sample.ecofriendly.model.OrderStatus;
import com.sample.ecofriendly.model.Shipment;
import com.sample.ecofriendly.repository.OrderRepository;
import com.sample.ecofriendly.repository.ShipmentRepository;

@Service
public class ShipmentService {
    @Autowired
    private ShipmentRepository shipmentRepository;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private SimpMessagingTemplate template;

    public Shipment createShipment(String orderId) {
        Shipment shipment = new Shipment(orderId, "SHIPPED", new Date(), null, new Date());
        Shipment savedShipment = shipmentRepository.save(shipment);

        // Update order status
        updateOrderStatus(orderId, "SHIPPED");

        return savedShipment;
    }

    public Shipment updateShipmentStatus(String shipmentId, String status) {
        Optional<Shipment> optionalShipment = shipmentRepository.findById(shipmentId);
        if (optionalShipment.isPresent()) {
            Shipment shipment = optionalShipment.get();
            shipment.setStatus(status);
            shipment.setUpdatedAt(new Date());
            if (status.equals("DELIVERED")) {
                shipment.setDeliveredAt(new Date());
            }
            shipmentRepository.save(shipment);

            // Update order status
            updateOrderStatus(shipment.getOrderId(), status);

            return shipment;
        }
        return null;
    }

    private void updateOrderStatus(String orderId, String status) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            order.setStatus(status);
            order.setUpdatedAt(new Date());
            orderRepository.save(order);

            // Send status update via WebSocket
            template.convertAndSend("/topic/status", new OrderStatus(orderId, status));
        }
    }

    public List<Shipment> getOrderShipments(String orderId) {
        return shipmentRepository.findByOrderId(orderId);
    }

    public Optional<Shipment> getShipmentById(String shipmentId) {
        return shipmentRepository.findById(shipmentId);
    }
}